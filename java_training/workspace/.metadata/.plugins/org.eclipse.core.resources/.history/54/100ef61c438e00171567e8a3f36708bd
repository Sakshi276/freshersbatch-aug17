package com.spring.TestOneToOne;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.jgroups.blocks.atomic.CounterService;

public class App 
{
	static long mId;
	
    public static void main( String[] args )
    {
    	Configuration configuration=new Configuration();
        configuration.configure("hibernate.cfg.xml");
        SessionFactory sessionFactory=configuration.buildSessionFactory();
        
        //insertCust(sessionFactory);
        
        
        insertMarket(sessionFactory);
        /*readMarket(sessionFactory);
        updateMarket(sessionFactory);
        readMarket(sessionFactory);
        deleteMarket(sessionFactory);
        readMarket(sessionFactory);
       
        
        insertStudent(sessionFactory);
        readStudent(sessionFactory);
        updateStudent(sessionFactory);
        readStudent(sessionFactory);
        deleteStudent(sessionFactory);
        readStudent(sessionFactory);
        */
        
        sessionFactory.close();
    }
    
    public static void insertStudent(SessionFactory sesionFactory) {
    	
    	Session session=sesionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Course course1=new Course("Java"); 
    	Course course2=new Course("Hibernate");
    	Course course3=new Course("Spring");
    	
    	Set<Course> courses11=new HashSet();
    	courses11.add(course1);
    	courses11.add(course2);
    	
    	Set<Course> courses22=new HashSet();
    	courses22.add(course3);
    	courses22.add(course2);
    	
    	
    	Student student1=new Student("AAA",courses11);
    	Student student2=new Student("BBB",courses22);
    	
    	session.persist(student1);
    	session.persist(student2);
    	
    	transaction.commit();
    	session.close();
		
	}
    
    public static void readStudent(SessionFactory sessionFactory) {
    	
    	Session session=sessionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Query query=session.createQuery("from Student");
    	List<Student> students=query.list();
    	System.out.println(students);
    	
    	
    	transaction.commit();
		session.close();
		
	}
    
    public static void updateStudent(SessionFactory sessionFactory) {
    	
    	Session session=sessionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Student student=session.load(Student.class, 1L);
    	student.setStudentName("Jake");
    	
    	transaction.commit();
		session.close();
		
	}
    
    public static void deleteStudent(SessionFactory sessionFactory) {
    	
    	Session session=sessionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Student student=session.load(Student.class, 1L);
    	session.delete(student);
    	
    	transaction.commit();
		session.close();
		
	}
    
    public static void insertCust(SessionFactory sessionFactory) {
    	
    	Session session=sessionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Address addr1=new Address("Aundh","Pune","MS");
        Customer cust1=new Customer("Sak",addr1);
        
        session.persist(cust1);
    	
    	transaction.commit();
		session.close();
	}
    
    public static void insertMarket(SessionFactory sessionFacory) {
    	
    	Session session=sessionFacory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Market market1=new Market();
    	
    	Stock stock1=new Stock("aaa",market1);
    	Stock stock2=new Stock("bbb",market1);
    	Stock stock3=new Stock("ccc",market1);
    	
    	Set<Stock> stocks=new HashSet<Stock>();
    	stocks.add(stock1);
    	stocks.add(stock2);
    	stocks.add(stock3);
    	
    	market1.setMarketName("market1");
    	market1.setStocks(stocks);
    	session.persist(market1);
    	
    	transaction.commit();
    	session.close();
		
	}
    
    public static void readMarket(SessionFactory sessionFactory)
    {
    	Session session=sessionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Query query=session.createQuery("from Market");
    	List<Market> markets=query.list();
    	System.out.println(markets);
    	for(Market market : markets)
    	{
    		mId=market.getMarketId();
    	}
    	transaction.commit();
    	session.close();
    }
    
    public static void updateMarket(SessionFactory sessionFactory) {
    	
    	Session session=sessionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Market market=session.load(Market.class, mId);
    	market.setMarketName("new market");
    	
    	transaction.commit();
    	session.close();
		
	}
    
    public static void deleteMarket(SessionFactory sessionFactory) {
    	
    	Session session=sessionFactory.openSession();
    	Transaction transaction=session.beginTransaction();
    	
    	Market market=session.load(Market.class, mId);
    	session.delete(market);
    	
    	transaction.commit();
    	session.close();
    	
		
	}
}
